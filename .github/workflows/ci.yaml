name: Go

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: "cr.selcloud.ru/course"
  IMAGE_NAME: "chat-server"
  CONTAINER_NAME: "chat-server-container"
  DB_CONTAINER_NAME: "chat-server-db-container"
  DB_IMAGE_NAME: "postgres:14"
  IMAGE_MIGRATION_NAME: "chat-server-migration"
  CONTAINER_MIGRATION_NAME: "chat-server-container-migration"

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache-dependency-path: go.sum

      - name: Build
        run: go build -o ./bin/ -v ./...

      - name: Test
        run: go test -v ./...

  linter:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: false
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.60
          args: --timeout=30m --config=./.golangci.pipeline.yaml

    # CI/CD Job - выполняет сборку и деплой Docker-образа
  image-build-and-push:
    runs-on: ubuntu-latest
    needs: [ build-and-test, linter ]  # Выполняется после Go-шагов
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create .env file for CI
        run: |
          echo "PG_DATABASE_NAME=chat-server" >> .env
          echo "PG_USER=${{ secrets.PG_USER }}" >> .env
          echo "PG_PASSWORD=${{ secrets.PG_PASSWORD }}" >> .env
          echo "PG_PORT=54322" >> .env
          echo "MIGRATION_DIR=./migrations" >> .env
          echo "GRPC_HOST=0.0.0.0" >> .env
          echo "GRPC_PORT=50051" >> .env
          echo "PG_DSN=host=$DB_CONTAINER_NAME port=5432 dbname=chat-server user=${{secrets.PG_USER}} password=${{secrets.PG_PASSWORD}} sslmode=disable" >> .env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Registry
        run: docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }} $REGISTRY

      - name: Build and Push Docker Image
        run: |
          TAG_NAME=$(echo $GITHUB_SHA | head -c7)
          docker buildx create --use
          docker buildx build --no-cache --push --tag $REGISTRY/$IMAGE_NAME:$TAG_NAME -f Dockerfile .

      - name: Build and Push Migrator Image
        run: |
          TAG_NAME=$(echo $GITHUB_SHA | head -c7)
          docker buildx build --no-cache --push --tag $REGISTRY/$IMAGE_MIGRATION_NAME:$TAG_NAME -f migration.Dockerfile .

  deploy-image:
    runs-on: ubuntu-latest
    needs: image-build-and-push  # Выполняется после успешного image-build-and-push
    steps:
      - name: Deploy Server Selectel via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSHKEY }}
          envs: IMAGE_NAME, REGISTRY, GITHUB_SHA, CONTAINER_NAME, DB_CONTAINER_NAME, DB_IMAGE_NAME, IMAGE_MIGRATION_NAME, CONTAINER_MIGRATION_NAME
          script: |
            # Создаем файл .env
            echo "PG_DATABASE_NAME=chat-server" >> .env
            echo "PG_USER=${{ secrets.PG_USER }}" >> .env
            echo "PG_PASSWORD=${{ secrets.PG_PASSWORD }}" >> .env
            echo "PG_PORT=54322" >> .env
            echo "MIGRATION_DIR=./migrations" >> .env
            
            # Создаем сеть
            docker network create auth-network || true
            
            # Запуск или создание контейнера Postgres с постоянным хранилищем
            if [ $(docker ps -q -f name=$DB_CONTAINER_NAME) ]; then
            echo "Контейнер базы данных уже запущен"
            else
            docker run -d --name $DB_CONTAINER_NAME \
            --network auth-network \
            -e POSTGRES_DB=chat-server \
            -e POSTGRES_USER=${{ secrets.PG_USER }} \
            -e POSTGRES_PASSWORD=${{ secrets.PG_PASSWORD }} \
            -v postgres_data:/var/lib/postgresql/data \
            -p 54322:5432 $DB_IMAGE_NAME
            fi
            
            # Запускаем мигратор
            TAG_NAME=$(echo $GITHUB_SHA | head -c7)
            docker stop $CONTAINER_MIGRATION_NAME || echo "Контейнер $CONTAINER_MIGRATION_NAME не запущен"
            docker rm $CONTAINER_MIGRATION_NAME || echo "Контейнер $CONTAINER_MIGRATION_NAME не существует"
            docker run --network auth-network --name $CONTAINER_MIGRATION_NAME \
            --env-file .env \
            -e DB_HOST=$DB_CONTAINER_NAME -t $REGISTRY/$IMAGE_MIGRATION_NAME:$TAG_NAME || echo "Ошибка запуска контейнера миграций"
            
            # Запуск сервера авторизации
            docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }} $REGISTRY
            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true
            docker run -d -p 50052:50052 --network auth-network --name $CONTAINER_NAME -t $REGISTRY/$IMAGE_NAME:$TAG_NAME
            
            # Удаление старых Docker-образов, которые не используются более одного дня
            docker image prune -a --filter "until=24h" -f